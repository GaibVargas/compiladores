PROGRAM -> STATEMENT | FUNCLIST | EPSILON
FUNCLIST -> FUNCDEF FUNCLIST'
FUNCLIST' -> FUNCLIST | EPSILON
FUNCDEF -> def ident ( PARAMLIST ) { STATELIST }
PARAMLIST -> int ident PARAMLISTINT
PARAMLISTINT -> v PARAMLIST | EPSILON
PARAMLIST -> float ident PARAMLISTFLOAT
PARAMLISTFLOAT -> v PARAMLIST | EPSILON
PARAMLIST -> string ident PARAMLISTSTRING
PARAMLISTSTRING -> v PARAMLIST | EPSILON
PARAMLIST -> tint ident INDEX_T PARAMLISTTINT
PARAMLISTTINT -> v PARAMLIST | EPSILON
PARAMLIST -> tfloat ident INDEX_T PARAMLISTTFLOAT
PARAMLISTTFLOAT -> v PARAMLIST | EPSILON
PARAMLIST -> tstring ident INDEX_T PARAMLISTTSTRING
PARAMLISTTSTRING -> v PARAMLIST | EPSILON
PARAMLIST -> EPSILON
STATEMENT -> VARDECL ; | ATRIBSTAT ; | PRINTSTAT ; | READSTAT ; | RETURNSTAT ; | IFSTAT | FORSTAT | { STATELIST } | break ; |  ;
INDEX -> [ int_constant ] INDEX'
INDEX' -> INDEX | EPSILON
INDEX_T -> [ int_constant ]
VARDECL -> int ident VARDECL' | float ident VARDECL' | string ident VARDECL'
VARDECL' -> INDEX | EPSILON
VARDECL -> tint ident INDEX_T | tfloat ident INDEX_T | tstring ident INDEX_T
ATRIBSTAT -> LVALUE = ATRIBSTAT'
ATRIBSTAT' -> EXPRESSION | ALLOCEXPRESSION | FUNCCALL
FUNCCALL ->  call ( ident ( PARAMLISTCALL ) )
PARAMLISTCALL ->  ident PARAMLISTCALL' | EPSILON
PARAMLISTCALL' -> v PARAMLISTCALL | EPSILON
PRINTSTAT -> print EXPRESSION
READSTAT -> read LVALUE
RETURNSTAT -> return RETURNSTAT'
RETURNSTAT' ->  ident  | EPSILON
IFSTAT -> if ( EXPRESSION ) { STATEMENT } IFSTAT'
IFSTAT' -> else STATEMENT | EPSILON
FORSTAT -> for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT
STATELIST -> STATEMENT STATELIST'
STATELIST' -> STATELIST | EPSILON
ALLOCAUX -> [ NUMEXPRESSION ] ALLOCAUX'
ALLOCAUX' -> ALLOCAUX | EPSILON
ALLOCEXPRESSION -> new ALLOCEXPRESSION'
ALLOCEXPRESSION' -> int ALLOCAUX | float ALLOCAUX | string ALLOCAUX
RELOP -> < | > | <= | >= | == | !=
EXPRESSION -> EXPRESSION_2 EXPRESSION'
EXPRESSION' -> or EXPRESSION_2 | EPSILON
EXPRESSION_2 -> EXPRESSION_3 EXPRESSION_2'
EXPRESSION_2' -> and EXPRESSION_3 | EPSILON
EXPRESSION_3 -> not EXPRESSION_4 | EXPRESSION_4
EXPRESSION_4 ->  NUMEXPRESSION EXPRESSION_4' | ( EXPRESSION )
EXPRESSION_4' -> RELOP NUMEXPRESSION | EPSILON
NUMEXPRESSIONAUX -> + NUMEXPRESSION | - NUMEXPRESSION
NUMEXPRESSION -> TERM NUMEXPRESSION'
NUMEXPRESSION' -> NUMEXPRESSIONAUX | EPSILON
TERM -> UNARYEXPR TERM'
TERM' -> UNARYEXPRAUX | EPSILON
UNARYEXPRAUX -> * UNARYEXPR | / UNARYEXPR | % UNARYEXPR
UNARYEXPR -> + FACTOR | - FACTOR | FACTOR
FACTOR -> int_constant | float_constant | string_constant | null | LVALUE | num ( NUMEXPRESSION )
LVALUE ->  ident LVALUE'
LVALUE' -> EPSILON | ALLOCAUX 